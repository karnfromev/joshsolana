{"ast":null,"code":"import React,{useMemo}from'react';import{ConnectionProvider,WalletProvider}from'@solana/wallet-adapter-react';import{WalletAdapterNetwork}from'@solana/wallet-adapter-base';import{getLedgerWallet,getPhantomWallet,getSlopeWallet,getSolflareWallet,getSolletExtensionWallet,getSolletWallet,getTorusWallet}from'@solana/wallet-adapter-wallets';import{WalletModalProvider,WalletDisconnectButton,WalletMultiButton}from'@solana/wallet-adapter-react-ui';import{clusterApiUrl}from'@solana/web3.js';import{WalletMulti}from\"./WalletMulti\";// Default styles that can be overridden by your app\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";require('@solana/wallet-adapter-react-ui/styles.css');export var Wallet=function Wallet(){// Can be set to 'devnet', 'testnet', or 'mainnet-beta'\nvar network=WalletAdapterNetwork.Devnet;// You can also provide a custom RPC endpoint\nvar endpoint=useMemo(function(){return clusterApiUrl(network);},[network]);// @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n// Only the wallets you configure here will be compiled into your application\nvar wallets=useMemo(function(){return[getPhantomWallet(),getSlopeWallet(),getSolflareWallet(),getTorusWallet({options:{clientId:'Get a client ID @ https://developer.tor.us'}}),getLedgerWallet(),getSolletWallet({network:network}),getSolletExtensionWallet({network:network})];},[network]);return/*#__PURE__*/_jsx(ConnectionProvider,{endpoint:endpoint,children:/*#__PURE__*/_jsx(WalletProvider,{wallets:wallets,children:/*#__PURE__*/_jsx(WalletModalProvider,{children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(WalletMultiButton,{style:{marginBottom:\"35px\"},onClick:// set connect true when Connect to wallet button is pressed\nfunction onClick(){console.log(\"Connected button is pressed\");localStorage.setItem(\"connected\",\"true\");}}),/*#__PURE__*/_jsx(WalletDisconnectButton,{onClick:// set conect false when disconnect is pressed\nfunction onClick(event){localStorage.setItem(\"connected\",\"false\");console.log(\"Disconnect button is pressed\");}}),/*#__PURE__*/_jsx(WalletMulti,{})]})})})});};","map":{"version":3,"sources":["D:/workspace/Webstrome/my-app/src/Wallet.tsx"],"names":["React","useMemo","ConnectionProvider","WalletProvider","WalletAdapterNetwork","getLedgerWallet","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletExtensionWallet","getSolletWallet","getTorusWallet","WalletModalProvider","WalletDisconnectButton","WalletMultiButton","clusterApiUrl","WalletMulti","require","Wallet","network","Devnet","endpoint","wallets","options","clientId","marginBottom","console","log","localStorage","setItem","event"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAmBC,OAAnB,KAA2C,OAA3C,CACA,OAAQC,kBAAR,CAA4BC,cAA5B,KAAiD,8BAAjD,CACA,OAAQC,oBAAR,KAAmC,6BAAnC,CACA,OACIC,eADJ,CAEIC,gBAFJ,CAGIC,cAHJ,CAIIC,iBAJJ,CAKIC,wBALJ,CAMIC,eANJ,CAOIC,cAPJ,KAQO,gCARP,CASA,OACIC,mBADJ,CAEIC,sBAFJ,CAGIC,iBAHJ,KAMO,iCANP,CASA,OAAQC,aAAR,KAA4B,iBAA5B,CACA,OAAQC,WAAR,KAA0B,eAA1B,CAEA;wFACAC,OAAO,CAAC,4CAAD,CAAP,CAEA,MAAO,IAAMC,CAAAA,MAAU,CAAG,QAAbA,CAAAA,MAAa,EAAM,CAC5B;AACA,GAAMC,CAAAA,OAAO,CAAGf,oBAAoB,CAACgB,MAArC,CAEA;AACA,GAAMC,CAAAA,QAAQ,CAAGpB,OAAO,CAAC,iBAAMc,CAAAA,aAAa,CAACI,OAAD,CAAnB,EAAD,CAA+B,CAACA,OAAD,CAA/B,CAAxB,CACA;AACA;AACA,GAAMG,CAAAA,OAAO,CAAGrB,OAAO,CAAC,iBAAM,CAC1BK,gBAAgB,EADU,CAE1BC,cAAc,EAFY,CAG1BC,iBAAiB,EAHS,CAI1BG,cAAc,CAAC,CACXY,OAAO,CAAE,CAACC,QAAQ,CAAE,4CAAX,CADE,CAAD,CAJY,CAO1BnB,eAAe,EAPW,CAQ1BK,eAAe,CAAC,CAACS,OAAO,CAAPA,OAAD,CAAD,CARW,CAS1BV,wBAAwB,CAAC,CAACU,OAAO,CAAPA,OAAD,CAAD,CATE,CAAN,EAAD,CAUpB,CAACA,OAAD,CAVoB,CAAvB,CAWA,mBACI,KAAC,kBAAD,EAAoB,QAAQ,CAAEE,QAA9B,uBACI,KAAC,cAAD,EAAgB,OAAO,CAAEC,OAAzB,uBACI,KAAC,mBAAD,wBACI,oCACI,KAAC,iBAAD,EAAmB,KAAK,CACpB,CACIG,YAAY,CAAG,MADnB,CADJ,CAMI,OAAO,CAAG;AACN,kBAAM,CACFC,OAAO,CAACC,GAAR,CAAY,6BAAZ,EACAC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAkC,MAAlC,EACH,CAVT,EADJ,cAeI,KAAC,sBAAD,EACI,OAAO,CAAG;AACN,iBAACC,KAAD,CAAW,CACPF,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAkC,OAAlC,EACAH,OAAO,CAACC,GAAR,CAAY,8BAAZ,EACH,CALT,EAfJ,cAsBI,KAAC,WAAD,IAtBJ,GADJ,EADJ,EADJ,EADJ,CAgCH,CAnDM","sourcesContent":["import React, {FC, useMemo, useState} from 'react';\r\nimport {ConnectionProvider, WalletProvider} from '@solana/wallet-adapter-react';\r\nimport {WalletAdapterNetwork} from '@solana/wallet-adapter-base';\r\nimport {\r\n    getLedgerWallet,\r\n    getPhantomWallet,\r\n    getSlopeWallet,\r\n    getSolflareWallet,\r\n    getSolletExtensionWallet,\r\n    getSolletWallet,\r\n    getTorusWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\nimport {\r\n    WalletModalProvider,\r\n    WalletDisconnectButton,\r\n    WalletMultiButton,\r\n    WalletConnectButton,\r\n    WalletModalContext\r\n} from '@solana/wallet-adapter-react-ui';\r\n\r\n\r\nimport {clusterApiUrl} from '@solana/web3.js';\r\nimport {WalletMulti} from \"./WalletMulti\";\r\n\r\n// Default styles that can be overridden by your app\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\nexport const Wallet: FC = () => {\r\n    // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\r\n    const network = WalletAdapterNetwork.Devnet;\r\n\r\n    // You can also provide a custom RPC endpoint\r\n    const endpoint = useMemo(() => clusterApiUrl(network), [network]);\r\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\r\n    // Only the wallets you configure here will be compiled into your application\r\n    const wallets = useMemo(() => [\r\n        getPhantomWallet(),\r\n        getSlopeWallet(),\r\n        getSolflareWallet(),\r\n        getTorusWallet({\r\n            options: {clientId: 'Get a client ID @ https://developer.tor.us'}\r\n        }),\r\n        getLedgerWallet(),\r\n        getSolletWallet({network}),\r\n        getSolletExtensionWallet({network}),\r\n    ], [network]);\r\n    return (\r\n        <ConnectionProvider endpoint={endpoint}>\r\n            <WalletProvider wallets={wallets}>\r\n                <WalletModalProvider>\r\n                    <div>\r\n                        <WalletMultiButton style={\r\n                            {\r\n                                marginBottom : \"35px\"\r\n                            }\r\n                        }\r\n\r\n                            onClick={ // set connect true when Connect to wallet button is pressed\r\n                                () => {\r\n                                    console.log(\"Connected button is pressed\")\r\n                                    localStorage.setItem(\"connected\", \"true\")\r\n                                }\r\n\r\n                            }\r\n                        />\r\n                        <WalletDisconnectButton\r\n                            onClick={ // set conect false when disconnect is pressed\r\n                                (event) => {\r\n                                    localStorage.setItem(\"connected\", \"false\")\r\n                                    console.log(\"Disconnect button is pressed\")\r\n                                }\r\n                            }/>\r\n                        <WalletMulti/>\r\n                    </div>\r\n                </WalletModalProvider>\r\n            </WalletProvider>\r\n        </ConnectionProvider>\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}