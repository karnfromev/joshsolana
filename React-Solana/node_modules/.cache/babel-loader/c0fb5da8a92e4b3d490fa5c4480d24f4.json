{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from 'firebase/app';\nimport \"firebase/analytics\";\nimport \"firebase/auth\";\nimport { getDatabase, ref, set, child, get } from \"firebase/database\"; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAZjuhDPmon1DnzRutD9a9YrlDxllu0mQQ\",\n  authDomain: \"solana-30d78.firebaseapp.com\",\n  databaseURL: \"https://solana-30d78-default-rtdb.firebaseio.com\",\n  projectId: \"solana-30d78\",\n  storageBucket: \"solana-30d78.appspot.com\",\n  messagingSenderId: \"516735150719\",\n  appId: \"1:516735150719:web:3ac592ff811e4d21022d4a\",\n  measurementId: \"G-2FQW03CHT6\"\n};\nconst app = initializeApp(firebaseConfig);\nconst db = getDatabase(app);\nconst dbRef = ref(db);\nexport async function SendData(UserName, Password, Address) {\n  console.log(\"Sending\");\n  await set(ref(db, 'users/' + UserName), {\n    username: UserName,\n    Password: Password,\n    Address: Address\n  }).then(() => {\n    console.log(\"Sending Completed\");\n  }).catch(error => {\n    console.log(\"error-->\" + error);\n  });\n}\n_c = SendData;\nexport async function CheckData(UserName) {\n  var value = \"\";\n  console.log(\"Checking\");\n  await get(child(dbRef, `users/${UserName}`)).then(snapshot => {\n    if (snapshot.exists()) {\n      console.log(snapshot.val());\n      value = \"Data available\";\n      return value;\n    } else {\n      value = \"No data available\";\n      console.log(\"No data available\");\n      return value;\n    }\n  }).catch(error => {\n    value = \"error\";\n    return value;\n    console.error(error);\n  });\n  return value;\n}\n_c2 = CheckData;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SendData\");\n$RefreshReg$(_c2, \"CheckData\");","map":{"version":3,"sources":["D:/workspace/Webstrome/my-app/src/Firebase.tsx"],"names":["initializeApp","getDatabase","ref","set","child","get","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","app","db","dbRef","SendData","UserName","Password","Address","console","log","username","then","catch","error","CheckData","value","snapshot","exists","val"],"mappings":"AAAA;AACA,SAAQA,aAAR,QAA4B,cAA5B;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,SAAQC,WAAR,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,KAA/B,EAAsCC,GAAtC,QAAgD,mBAAhD,C,CACA;AACA;AAEA;AACA;;AACA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,8BAFO;AAGnBC,EAAAA,WAAW,EAAE,kDAHM;AAInBC,EAAAA,SAAS,EAAE,cAJQ;AAKnBC,EAAAA,aAAa,EAAE,0BALI;AAMnBC,EAAAA,iBAAiB,EAAE,cANA;AAOnBC,EAAAA,KAAK,EAAE,2CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAAvB;AAWA,MAAMC,GAAG,GAAGf,aAAa,CAACM,cAAD,CAAzB;AACA,MAAMU,EAAE,GAAGf,WAAW,CAACc,GAAD,CAAtB;AACA,MAAME,KAAK,GAAGf,GAAG,CAACc,EAAD,CAAjB;AAEA,OAAO,eAAeE,QAAf,CAAwBC,QAAxB,EAA0CC,QAA1C,EAA4DC,OAA5D,EAA6E;AAChFC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,QAAMpB,GAAG,CAACD,GAAG,CAACc,EAAD,EAAK,WAAWG,QAAhB,CAAJ,EAA+B;AACpCK,IAAAA,QAAQ,EAAEL,QAD0B;AAEpCC,IAAAA,QAAQ,EAAEA,QAF0B;AAGpCC,IAAAA,OAAO,EAAEA;AAH2B,GAA/B,CAAH,CAIHI,IAJG,CAIE,MAAM;AACVH,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,GANK,EAMHG,KANG,CAMGC,KAAK,IAAI;AACdL,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAaI,KAAzB;AACH,GARK,CAAN;AAUH;KAZqBT,Q;AActB,OAAO,eAAeU,SAAf,CAAyBT,QAAzB,EAA2C;AAC9C,MAAIU,KAAK,GAAG,EAAZ;AACAP,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,QAAMlB,GAAG,CAACD,KAAK,CAACa,KAAD,EAAS,SAAQE,QAAS,EAA1B,CAAN,CAAH,CAAuCM,IAAvC,CAA6CK,QAAD,IAAc;AAC5D,QAAIA,QAAQ,CAACC,MAAT,EAAJ,EAAuB;AACnBT,MAAAA,OAAO,CAACC,GAAR,CAAYO,QAAQ,CAACE,GAAT,EAAZ;AACAH,MAAAA,KAAK,GAAG,gBAAR;AACA,aAAOA,KAAP;AACH,KAJD,MAIO;AACHA,MAAAA,KAAK,GAAG,mBAAR;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,aAAOM,KAAP;AACH;AACJ,GAVK,EAUHH,KAVG,CAUIC,KAAD,IAAW;AAChBE,IAAAA,KAAK,GAAG,OAAR;AACA,WAAOA,KAAP;AACAP,IAAAA,OAAO,CAACK,KAAR,CAAcA,KAAd;AACH,GAdK,CAAN;AAeA,SAAOE,KAAP;AACH;MAnBqBD,S","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport {initializeApp} from 'firebase/app';\r\nimport \"firebase/analytics\";\r\nimport \"firebase/auth\";\r\nimport {getFirestore, collection, getDocs} from 'firebase/firestore/lite';\r\nimport {getDatabase, ref, set, child, get} from \"firebase/database\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAZjuhDPmon1DnzRutD9a9YrlDxllu0mQQ\",\r\n    authDomain: \"solana-30d78.firebaseapp.com\",\r\n    databaseURL: \"https://solana-30d78-default-rtdb.firebaseio.com\",\r\n    projectId: \"solana-30d78\",\r\n    storageBucket: \"solana-30d78.appspot.com\",\r\n    messagingSenderId: \"516735150719\",\r\n    appId: \"1:516735150719:web:3ac592ff811e4d21022d4a\",\r\n    measurementId: \"G-2FQW03CHT6\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getDatabase(app);\r\nconst dbRef = ref(db);\r\n\r\nexport async function SendData(UserName: string, Password: string, Address: string) {\r\n    console.log(\"Sending\");\r\n    await set(ref(db, 'users/' + UserName), {\r\n        username: UserName,\r\n        Password: Password,\r\n        Address: Address,\r\n    }).then(() => {\r\n        console.log(\"Sending Completed\");\r\n    }).catch(error => {\r\n        console.log(\"error-->\" + error);\r\n    });\r\n\r\n}\r\n\r\nexport async function CheckData(UserName: string) {\r\n    var value = \"\";\r\n    console.log(\"Checking\");\r\n    await get(child(dbRef, `users/${UserName}`)).then((snapshot) => {\r\n        if (snapshot.exists()) {\r\n            console.log(snapshot.val());\r\n            value = \"Data available\";\r\n            return value;\r\n        } else {\r\n            value = \"No data available\";\r\n            console.log(\"No data available\");\r\n            return value;\r\n        }\r\n    }).catch((error) => {\r\n        value = \"error\";\r\n        return value;\r\n        console.error(error);\r\n    });\r\n    return value;\r\n}"]},"metadata":{},"sourceType":"module"}