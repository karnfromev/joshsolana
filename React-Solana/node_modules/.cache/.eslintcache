[{"D:\\workspace\\Webstrome\\my-app\\src\\index.tsx":"1","D:\\workspace\\Webstrome\\my-app\\src\\reportWebVitals.ts":"2","D:\\workspace\\Webstrome\\my-app\\src\\App.tsx":"3","D:\\workspace\\Webstrome\\my-app\\src\\Wallet.tsx":"4","D:\\workspace\\Webstrome\\my-app\\src\\Firebase.tsx":"5","D:\\workspace\\Webstrome\\my-app\\src\\WalletMulti.tsx":"6","D:\\workspace\\Webstrome\\my-app\\src\\Signup.tsx":"7","D:\\workspace\\Webstrome\\my-app\\src\\Database.tsx":"8"},{"size":500,"mtime":1632937744353,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1632937744353,"results":"11","hashOfConfig":"10"},{"size":448,"mtime":1633545543066,"results":"12","hashOfConfig":"10"},{"size":2992,"mtime":1633634398252,"results":"13","hashOfConfig":"10"},{"size":2057,"mtime":1633682661973,"results":"14","hashOfConfig":"10"},{"size":841,"mtime":1633633613848,"results":"15","hashOfConfig":"10"},{"size":6763,"mtime":1633792829332,"results":"16","hashOfConfig":"10"},{"size":1576,"mtime":1633682424556,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"7csj57",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"20"},"D:\\workspace\\Webstrome\\my-app\\src\\index.tsx",[],["40","41"],"D:\\workspace\\Webstrome\\my-app\\src\\reportWebVitals.ts",[],"D:\\workspace\\Webstrome\\my-app\\src\\App.tsx",["42","43","44","45"],"import './App.css';\nimport {Wallet} from './Wallet';\nimport \"./Firebase\";\nimport {useWallet} from \"@solana/wallet-adapter-react\";\nimport {SendData, CheckData} from './Firebase';\nimport Signup from \"./Signup\";\n\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <div className=\"content\">\n                <div>\n                 <Signup/>\n                </div>\n            </div>\n        </div>\n    );\n\n\n}\n\nexport default App;\n","D:\\workspace\\Webstrome\\my-app\\src\\Wallet.tsx",["46","47","48"],"import React, {FC, useMemo, useState} from 'react';\r\nimport {ConnectionProvider, WalletProvider} from '@solana/wallet-adapter-react';\r\nimport {WalletAdapterNetwork} from '@solana/wallet-adapter-base';\r\nimport {\r\n    getLedgerWallet,\r\n    getPhantomWallet,\r\n    getSlopeWallet,\r\n    getSolflareWallet,\r\n    getSolletExtensionWallet,\r\n    getSolletWallet,\r\n    getTorusWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\nimport {\r\n    WalletModalProvider,\r\n    WalletDisconnectButton,\r\n    WalletMultiButton,\r\n    WalletConnectButton,\r\n    WalletModalContext\r\n} from '@solana/wallet-adapter-react-ui';\r\n\r\n\r\nimport {clusterApiUrl} from '@solana/web3.js';\r\nimport {WalletMulti} from \"./WalletMulti\";\r\n\r\n// Default styles that can be overridden by your app\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\nexport const Wallet: FC = () => {\r\n    // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\r\n    const network = WalletAdapterNetwork.Devnet;\r\n\r\n    // You can also provide a custom RPC endpoint\r\n    const endpoint = useMemo(() => clusterApiUrl(network), [network]);\r\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\r\n    // Only the wallets you configure here will be compiled into your application\r\n    const wallets = useMemo(() => [\r\n        getPhantomWallet(),\r\n        getSlopeWallet(),\r\n        getSolflareWallet(),\r\n        getTorusWallet({\r\n            options: {clientId: 'Get a client ID @ https://developer.tor.us'}\r\n        }),\r\n        getLedgerWallet(),\r\n        getSolletWallet({network}),\r\n        getSolletExtensionWallet({network}),\r\n    ], [network]);\r\n    return (\r\n        <ConnectionProvider endpoint={endpoint}>\r\n            <WalletProvider wallets={wallets}>\r\n                <WalletModalProvider>\r\n                    <div>\r\n                        <WalletMultiButton style={\r\n                            {\r\n                                marginBottom : \"35px\"\r\n                            }\r\n                        }\r\n\r\n                            onClick={ // set connect true when Connect to wallet button is pressed\r\n                                () => {\r\n                                    console.log(\"Connected button is pressed\")\r\n                                    localStorage.setItem(\"connected\", \"true\")\r\n                                }\r\n\r\n                            }\r\n                        />\r\n                        <WalletDisconnectButton\r\n                            onClick={ // set conect false when disconnect is pressed\r\n                                (event) => {\r\n                                    localStorage.setItem(\"connected\", \"false\")\r\n                                    console.log(\"Disconnect button is pressed\")\r\n                                }\r\n                            }/>\r\n                        <WalletMulti/>\r\n                    </div>\r\n                </WalletModalProvider>\r\n            </WalletProvider>\r\n        </ConnectionProvider>\r\n    );\r\n};","D:\\workspace\\Webstrome\\my-app\\src\\Firebase.tsx",["49","50","51","52"],"// Import the functions you need from the SDKs you need\r\nimport {initializeApp} from 'firebase/app';\r\nimport \"firebase/analytics\";\r\nimport \"firebase/auth\";\r\nimport {getFirestore, collection, getDocs} from 'firebase/firestore/lite';\r\nimport {getDatabase, ref, set, child, get} from \"firebase/database\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAZjuhDPmon1DnzRutD9a9YrlDxllu0mQQ\",\r\n    authDomain: \"solana-30d78.firebaseapp.com\",\r\n    databaseURL: \"https://solana-30d78-default-rtdb.firebaseio.com\",\r\n    projectId: \"solana-30d78\",\r\n    storageBucket: \"solana-30d78.appspot.com\",\r\n    messagingSenderId: \"516735150719\",\r\n    appId: \"1:516735150719:web:3ac592ff811e4d21022d4a\",\r\n    measurementId: \"G-2FQW03CHT6\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getDatabase(app);\r\nconst dbRef = ref(db);\r\n\r\nexport async function SendData(UserName: string, Password: string, Address: string) {\r\n    console.log(\"Sending\");\r\n    await set(ref(db, 'users/' + UserName), {\r\n        username: UserName,\r\n        Password: Password,\r\n        Address: Address,\r\n    }).then(() => {\r\n        console.log(\"Sending Completed\");\r\n    }).catch(error => {\r\n        console.log(\"error-->\" + error);\r\n    });\r\n\r\n}\r\n\r\nexport async function CheckData(UserName: string) {\r\n    var value = \"\";\r\n    console.log(\"Checking\");\r\n    await get(child(dbRef, `users/${UserName}`)).then((snapshot) => {\r\n        if (snapshot.exists()) {\r\n            console.log(snapshot.val());\r\n            value = \"Data available\";\r\n            return value;\r\n        } else {\r\n            value = \"No data available\";\r\n            console.log(\"No data available\");\r\n            return value;\r\n        }\r\n    }).catch((error) => {\r\n        value = \"error\";\r\n        return value;\r\n        console.error(error);\r\n    });\r\n    return value;\r\n}","D:\\workspace\\Webstrome\\my-app\\src\\WalletMulti.tsx",[],"D:\\workspace\\Webstrome\\my-app\\src\\Signup.tsx",["53","54","55"],"import React from 'react';\r\nimport './App.css';\r\nimport {CheckData, SendData} from \"./Firebase\";\r\nimport {Wallet} from \"./Wallet\";\r\n\r\n\r\nimport {\r\n    Database\r\n} from './Database'\r\n\r\n\r\nclass Signup extends React.Component {\r\n\r\n\r\n    private userData: any = {};\r\n    private buttonName: string = \"\"\r\n    private isPasswordAllocated: string = \"\";\r\n\r\n\r\n\r\n    async isDataAvailable(username: string) {\r\n        const data = await CheckData(username);\r\n        if (data !== \"No data available\") {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n    state = {\r\n        show: true,\r\n        message: \"\",\r\n        color: \"\",\r\n        usernameAvailable: false,\r\n        passwordAvailable: false,\r\n        showWallet: true,\r\n        saveData: true,\r\n        disableButton: true\r\n    };\r\n\r\n\r\n    writeUserData = () => {\r\n        console.log(\"DATA SAVED\");\r\n    };\r\n\r\n    getUserData = () => {\r\n        console.log(\"DATA COLLECTED\");\r\n    };\r\n\r\n    changeUI() {\r\n        this.setState({show: !this.state.show});\r\n        this.setState({showWallet: !this.state.showWallet});\r\n    }\r\n\r\n    changeMessage(msg: string, color: string) {\r\n        this.setState({message: msg});\r\n        this.setState({color: color});\r\n\r\n    }\r\n\r\n    onValueChange = (key: string, value: string) => {\r\n        this.userData[key] = value;\r\n    }\r\n\r\n    onUpdate(event: any, message: string, color: string, checkAvailability: boolean) {\r\n        this.onValueChange(\"username\", event.target.value)\r\n        this.state.usernameAvailable = checkAvailability;\r\n        this.changeMessage(message, color)\r\n    }\r\n\r\n    reset = () => {\r\n        localStorage.removeItem(\"disconnect\");\r\n        localStorage.removeItem(\"address\")\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <h1>Solana Wallet</h1>\r\n                    <div>\r\n                        {this.reset}\r\n                    </div>\r\n                    <div>\r\n                        {\r\n\r\n                            this.state.show ?\r\n                                <div>\r\n                                    <input id=\"username\"\r\n                                           type=\"text\"\r\n                                           placeholder=\"Enter username\"\r\n                                           onChange={\r\n                                               async (evt) => {\r\n\r\n                                                   if (evt.target.value === '') {\r\n                                                       this.onUpdate(evt, \"\", \"#000000\", false)\r\n                                                       return\r\n                                                   }\r\n\r\n                                                   if (await this.isDataAvailable(evt.target.value)) {\r\n                                                       this.onUpdate(evt, \"Username is not available\", \"#ff0000\", false)\r\n                                                   } else {\r\n                                                       this.onUpdate(evt, \"Username is available\", \"#00ff00\", true)\r\n                                                   }\r\n                                               }\r\n                                           }/>\r\n                                    <br/>\r\n                                    <a style={\r\n                                        {\r\n                                            color: this.state.color\r\n                                        }\r\n                                    }>\r\n                                        {this.state.message}\r\n                                    </a>\r\n\r\n                                    <br/><br/>\r\n\r\n                                    <input id=\"password\"\r\n                                           type=\"password\"\r\n                                           placeholder=\"Enter password\"\r\n                                           onChange={\r\n                                               (evt) => {\r\n                                                   this.onValueChange(\"password\", evt.target.value)\r\n                                                   this.isPasswordAllocated = evt.target.value;\r\n                                               }\r\n                                           }\r\n                                    />\r\n                                    <br/><br/>\r\n                                    <button\r\n                                        id=\"btn\"\r\n\r\n                                        onClick={\r\n                                            () => {\r\n                                                if (this.state.usernameAvailable && this.isPasswordAllocated !== \"\") {\r\n                                                    this.changeUI(); // Address Connect\r\n                                                    localStorage.setItem(\"username\", this.userData[\"username\"])\r\n                                                    localStorage.setItem(\"password\", this.userData[\"password\"])\r\n                                                    localStorage.removeItem(\"address\");\r\n                                                } else {\r\n                                                    //Pass\r\n                                                }\r\n\r\n                                            }\r\n                                        }>\r\n                                        Sign Up\r\n                                    </button>\r\n\r\n                                </div> :\r\n                                !this.state.showWallet ?\r\n                                    <div>\r\n                                        <Wallet/>\r\n                                        <br/>\r\n                                        <button id=\"btn\"\r\n                                                style={{float: \"left\"}}\r\n                                                onClick={() => {\r\n                                                    this.setState({showWallet: !this.state.showWallet});\r\n                                                    this.setState({saveData: !this.state.saveData});\r\n                                                }\r\n                                                }>\r\n                                            Save\r\n                                        </button>\r\n                                    </div>\r\n                                    : !this.state.saveData ?\r\n                                        <div>\r\n                                            <Database/>\r\n                                        </div> : null\r\n\r\n                        }\r\n                    </div>\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Signup;\r\n","D:\\workspace\\Webstrome\\my-app\\src\\Database.tsx",["56"],"import {CheckData, SendData} from \"./Firebase\";\r\nimport {useState} from \"react\";\r\n\r\nexport const Database = () => {\r\n\r\n    async function send(username: string, password: string, address: string) {\r\n        const data = await CheckData(username);\r\n        if (data !== \"No data available\") {\r\n            console.log(\"Return\");\r\n            return;\r\n        }\r\n        await SendData(username, password, address);\r\n    }\r\n\r\n    console.log(localStorage.getItem(\"address\"))\r\n\r\n    if (localStorage.getItem(\"address\") !== null && localStorage.getItem(\"address\") !== undefined)\r\n        send(\"\" + localStorage.getItem(\"username\"), \"\" + localStorage.getItem(\"password\"), \"\" + localStorage.getItem(\"address\"))\r\n\r\n\r\n    return (\r\n        <>\r\n            <button id=\"btn\" onClick={\r\n                () => {\r\n                    window.location.reload();\r\n                }\r\n            }>\r\n                Refresh\r\n            </button>\r\n            <br/><br/>\r\n            <div style={\r\n                {\r\n                    whiteSpace: \"pre-line\",\r\n                    fontStyle: \"italic\",\r\n                    fontWeight: \"bold\"\r\n                }\r\n            }>\r\n                {\r\n                    localStorage.getItem(\"address\") === null ? \"No wallet found\\nPlease refresh the page and connect your wallet\" : \"Thank you for sign up\\n\\n Go Back To Game\"\r\n                }\r\n            </div>\r\n            <>{\r\n                () => {\r\n                    localStorage.removeItem(\"address\");\r\n                }\r\n            }\r\n            </>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n",{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":2,"column":9,"nodeType":"63","messageId":"64","endLine":2,"endColumn":15},{"ruleId":"61","severity":1,"message":"65","line":4,"column":9,"nodeType":"63","messageId":"64","endLine":4,"endColumn":18},{"ruleId":"61","severity":1,"message":"66","line":5,"column":9,"nodeType":"63","messageId":"64","endLine":5,"endColumn":17},{"ruleId":"61","severity":1,"message":"67","line":5,"column":19,"nodeType":"63","messageId":"64","endLine":5,"endColumn":28},{"ruleId":"61","severity":1,"message":"68","line":1,"column":29,"nodeType":"63","messageId":"64","endLine":1,"endColumn":37},{"ruleId":"61","severity":1,"message":"69","line":17,"column":5,"nodeType":"63","messageId":"64","endLine":17,"endColumn":24},{"ruleId":"61","severity":1,"message":"70","line":18,"column":5,"nodeType":"63","messageId":"64","endLine":18,"endColumn":23},{"ruleId":"61","severity":1,"message":"71","line":5,"column":9,"nodeType":"63","messageId":"64","endLine":5,"endColumn":21},{"ruleId":"61","severity":1,"message":"72","line":5,"column":23,"nodeType":"63","messageId":"64","endLine":5,"endColumn":33},{"ruleId":"61","severity":1,"message":"73","line":5,"column":35,"nodeType":"63","messageId":"64","endLine":5,"endColumn":42},{"ruleId":"74","severity":1,"message":"75","line":57,"column":9,"nodeType":"76","messageId":"77","endLine":57,"endColumn":30},{"ruleId":"61","severity":1,"message":"66","line":3,"column":20,"nodeType":"63","messageId":"64","endLine":3,"endColumn":28},{"ruleId":"78","severity":1,"message":"79","line":67,"column":9,"nodeType":"80","endLine":67,"endColumn":19},{"ruleId":"81","severity":1,"message":"82","line":110,"column":37,"nodeType":"83","endLine":114,"endColumn":39},{"ruleId":"61","severity":1,"message":"68","line":2,"column":9,"nodeType":"63","messageId":"64","endLine":2,"endColumn":17},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"@typescript-eslint/no-unused-vars","'Wallet' is defined but never used.","Identifier","unusedVar","'useWallet' is defined but never used.","'SendData' is defined but never used.","'CheckData' is defined but never used.","'useState' is defined but never used.","'WalletConnectButton' is defined but never used.","'WalletModalContext' is defined but never used.","'getFirestore' is defined but never used.","'collection' is defined but never used.","'getDocs' is defined but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]