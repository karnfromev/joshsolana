{"ast":null,"code":"var _jsxFileName = \"D:\\\\workspace\\\\Webstrome\\\\my-app\\\\src\\\\Wallet.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { getLedgerWallet, getPhantomWallet, getSlopeWallet, getSolflareWallet, getSolletExtensionWallet, getSolletWallet, getTorusWallet } from '@solana/wallet-adapter-wallets';\nimport { WalletModalProvider, WalletDisconnectButton, WalletMultiButton } from '@solana/wallet-adapter-react-ui';\nimport { WalletMulti } from './WalletMulti';\nimport { clusterApiUrl } from '@solana/web3.js'; // Default styles that can be overridden by your app\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nexport const Wallet = () => {\n  _s();\n\n  // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\n  const network = WalletAdapterNetwork.Devnet; // You can also provide a custom RPC endpoint\n\n  const endpoint = useMemo(() => clusterApiUrl(network), [network]); // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\n  // Only the wallets you configure here will be compiled into your application\n\n  const wallets = useMemo(() => [getPhantomWallet(), getSlopeWallet(), getSolflareWallet(), getTorusWallet({\n    options: {\n      clientId: 'Get a client ID @ https://developer.tor.us'\n    }\n  }), getLedgerWallet(), getSolletWallet({\n    network\n  }), getSolletExtensionWallet({\n    network\n  })], [network]);\n  return /*#__PURE__*/_jsxDEV(ConnectionProvider, {\n    endpoint: endpoint,\n    children: /*#__PURE__*/_jsxDEV(WalletProvider, {\n      wallets: wallets,\n      autoConnect: true,\n      children: /*#__PURE__*/_jsxDEV(WalletModalProvider, {\n        children: [/*#__PURE__*/_jsxDEV(WalletMultiButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Go Back to Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(WalletDisconnectButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(WalletMulti, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Wallet, \"RNaTq20PjYTGasfEtgZ8qKkPMD0=\");\n\n_c = Wallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"sources":["D:/workspace/Webstrome/my-app/src/Wallet.tsx"],"names":["React","useMemo","ConnectionProvider","WalletProvider","WalletAdapterNetwork","getLedgerWallet","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletExtensionWallet","getSolletWallet","getTorusWallet","WalletModalProvider","WalletDisconnectButton","WalletMultiButton","WalletMulti","clusterApiUrl","require","Wallet","network","Devnet","endpoint","wallets","options","clientId"],"mappings":";;;AAAA,OAAOA,KAAP,IAAoBC,OAApB,QAAmC,OAAnC;AACA,SAASC,kBAAT,EAA6BC,cAA7B,QAAmD,8BAAnD;AACA,SAASC,oBAAT,QAAqC,6BAArC;AACA,SACIC,eADJ,EAEIC,gBAFJ,EAGIC,cAHJ,EAIIC,iBAJJ,EAKIC,wBALJ,EAMIC,eANJ,EAOIC,cAPJ,QAQO,gCARP;AASA,SACIC,mBADJ,EAEIC,sBAFJ,EAGIC,iBAHJ,QAMO,iCANP;AAQA,SACIC,WADJ,QAEO,eAFP;AAGA,SAASC,aAAT,QAA8B,iBAA9B,C,CAEA;;;;AACAC,OAAO,CAAC,4CAAD,CAAP;;AAEA,OAAO,MAAMC,MAAU,GAAG,MAAM;AAAA;;AAC5B;AACA,QAAMC,OAAO,GAAGf,oBAAoB,CAACgB,MAArC,CAF4B,CAI5B;;AACA,QAAMC,QAAQ,GAAGpB,OAAO,CAAC,MAAMe,aAAa,CAACG,OAAD,CAApB,EAA+B,CAACA,OAAD,CAA/B,CAAxB,CAL4B,CAM5B;AACA;;AACA,QAAMG,OAAO,GAAGrB,OAAO,CAAC,MAAM,CAC1BK,gBAAgB,EADU,EAE1BC,cAAc,EAFY,EAG1BC,iBAAiB,EAHS,EAI1BG,cAAc,CAAC;AACXY,IAAAA,OAAO,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ;AADE,GAAD,CAJY,EAO1BnB,eAAe,EAPW,EAQ1BK,eAAe,CAAC;AAAES,IAAAA;AAAF,GAAD,CARW,EAS1BV,wBAAwB,CAAC;AAAEU,IAAAA;AAAF,GAAD,CATE,CAAP,EAUpB,CAACA,OAAD,CAVoB,CAAvB;AAWA,sBACI,QAAC,kBAAD;AAAoB,IAAA,QAAQ,EAAEE,QAA9B;AAAA,2BACI,QAAC,cAAD;AAAgB,MAAA,OAAO,EAAEC,OAAzB;AAAkC,MAAA,WAAW,MAA7C;AAAA,6BACI,QAAC,mBAAD;AAAA,gCACI,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,iCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAQI,QAAC,sBAAD;AAAA;AAAA;AAAA;AAAA,gBARJ,eASI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,gBATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CApCM;;GAAMJ,M;;KAAAA,M","sourcesContent":["import React, { FC, useMemo } from 'react';\r\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport {\r\n    getLedgerWallet,\r\n    getPhantomWallet,\r\n    getSlopeWallet,\r\n    getSolflareWallet,\r\n    getSolletExtensionWallet,\r\n    getSolletWallet,\r\n    getTorusWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\nimport {\r\n    WalletModalProvider,\r\n    WalletDisconnectButton,\r\n    WalletMultiButton,\r\n    WalletConnectButton,\r\n    WalletModalContext\r\n} from '@solana/wallet-adapter-react-ui';\r\n\r\nimport {\r\n    WalletMulti\r\n} from './WalletMulti'\r\nimport { clusterApiUrl } from '@solana/web3.js';\r\n\r\n// Default styles that can be overridden by your app\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\nexport const Wallet: FC = () => {\r\n    // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\r\n    const network = WalletAdapterNetwork.Devnet;\r\n\r\n    // You can also provide a custom RPC endpoint\r\n    const endpoint = useMemo(() => clusterApiUrl(network), [network]);\r\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\r\n    // Only the wallets you configure here will be compiled into your application\r\n    const wallets = useMemo(() => [\r\n        getPhantomWallet(),\r\n        getSlopeWallet(),\r\n        getSolflareWallet(),\r\n        getTorusWallet({\r\n            options: { clientId: 'Get a client ID @ https://developer.tor.us' }\r\n        }),\r\n        getLedgerWallet(),\r\n        getSolletWallet({ network }),\r\n        getSolletExtensionWallet({ network }),\r\n    ], [network]);\r\n    return (\r\n        <ConnectionProvider endpoint={endpoint}>\r\n            <WalletProvider wallets={wallets} autoConnect>\r\n                <WalletModalProvider>\r\n                    <WalletMultiButton/>\r\n                    <div>\r\n                        <h1>\r\n                        Go Back to Game\r\n                        </h1>\r\n                        \r\n                    </div>\r\n                    <WalletDisconnectButton />\r\n                    <WalletMulti/>\r\n                </WalletModalProvider>\r\n            </WalletProvider>\r\n        </ConnectionProvider>\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}