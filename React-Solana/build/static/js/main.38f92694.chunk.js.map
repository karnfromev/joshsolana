{"version":3,"sources":["Firebase.tsx","WalletMulti.tsx","Wallet.tsx","Database.tsx","Signup.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getDatabase","dbRef","ref","SendData","UserName","Password","Address","a","console","log","set","username","then","catch","error","CheckData","value","get","child","snapshot","exists","val","WalletMulti","publicKey","useWallet","base58","useMemo","toBase58","localStorage","getItem","removeItem","undefined","setItem","require","Wallet","network","WalletAdapterNetwork","Devnet","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getTorusWallet","options","clientId","getLedgerWallet","getSolletWallet","getSolletExtensionWallet","style","marginBottom","onClick","event","Database","password","address","send","id","window","location","reload","whiteSpace","fontStyle","fontWeight","Signup","userData","buttonName","isPasswordAllocated","state","show","message","color","usernameAvailable","passwordAvailable","showWallet","saveData","disableButton","writeUserData","getUserData","onValueChange","key","reset","this","setState","msg","checkAvailability","target","changeMessage","className","type","placeholder","onChange","evt","onUpdate","isDataAvailable","changeUI","float","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38f92694.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport {initializeApp} from 'firebase/app';\r\nimport \"firebase/analytics\";\r\nimport \"firebase/auth\";\r\nimport {getFirestore, collection, getDocs} from 'firebase/firestore/lite';\r\nimport {getDatabase, ref, set, child, get} from \"firebase/database\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAZjuhDPmon1DnzRutD9a9YrlDxllu0mQQ\",\r\n    authDomain: \"solana-30d78.firebaseapp.com\",\r\n    databaseURL: \"https://solana-30d78-default-rtdb.firebaseio.com\",\r\n    projectId: \"solana-30d78\",\r\n    storageBucket: \"solana-30d78.appspot.com\",\r\n    messagingSenderId: \"516735150719\",\r\n    appId: \"1:516735150719:web:3ac592ff811e4d21022d4a\",\r\n    measurementId: \"G-2FQW03CHT6\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getDatabase(app);\r\nconst dbRef = ref(db);\r\n\r\nexport async function SendData(UserName: string, Password: string, Address: string) {\r\n    console.log(\"Sending\");\r\n    await set(ref(db, 'users/' + UserName), {\r\n        username: UserName,\r\n        Password: Password,\r\n        Address: Address,\r\n    }).then(() => {\r\n        console.log(\"Sending Completed\");\r\n    }).catch(error => {\r\n        console.log(\"error-->\" + error);\r\n    });\r\n\r\n}\r\n\r\nexport async function CheckData(UserName: string) {\r\n    var value = \"\";\r\n    console.log(\"Checking\");\r\n    await get(child(dbRef, `users/${UserName}`)).then((snapshot) => {\r\n        if (snapshot.exists()) {\r\n            console.log(snapshot.val());\r\n            value = \"Data available\";\r\n            return value;\r\n        } else {\r\n            value = \"No data available\";\r\n            console.log(\"No data available\");\r\n            return value;\r\n        }\r\n    }).catch((error) => {\r\n        value = \"error\";\r\n        return value;\r\n        console.error(error);\r\n    });\r\n    return value;\r\n}","import {useWallet} from '@solana/wallet-adapter-react';\r\nimport React, {useMemo} from 'react';\r\n\r\nexport const WalletMulti = () => {\r\n\r\n    const {publicKey} = useWallet(); // get public key form the useWallett\r\n    const base58 = useMemo(() => publicKey?.toBase58(), [publicKey]);\r\n\r\n    console.log(\"isConnected \"+localStorage.getItem(\"connected\"))\r\n\r\n    if (localStorage.getItem(\"connected\") === \"false\") {\r\n        localStorage.removeItem(\"address\") // Remove previous same address if disconnected button is pressed\r\n    }\r\n\r\n    else if (base58 !== undefined && localStorage.getItem(\"connected\") === \"true\"){\r\n        localStorage.setItem(\"address\",base58+\"\") // set the address of the wallet if wallet is connected and base58 has wallet address\r\n        console.log(base58)\r\n    }\r\n\r\n    return (\r\n        <>\r\n        </>\r\n    )\r\n};\r\n","import React, {FC, useMemo, useState} from 'react';\r\nimport {ConnectionProvider, WalletProvider} from '@solana/wallet-adapter-react';\r\nimport {WalletAdapterNetwork} from '@solana/wallet-adapter-base';\r\nimport {\r\n    getLedgerWallet,\r\n    getPhantomWallet,\r\n    getSlopeWallet,\r\n    getSolflareWallet,\r\n    getSolletExtensionWallet,\r\n    getSolletWallet,\r\n    getTorusWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\nimport {\r\n    WalletModalProvider,\r\n    WalletDisconnectButton,\r\n    WalletMultiButton,\r\n    WalletConnectButton,\r\n    WalletModalContext\r\n} from '@solana/wallet-adapter-react-ui';\r\n\r\n\r\nimport {clusterApiUrl} from '@solana/web3.js';\r\nimport {WalletMulti} from \"./WalletMulti\";\r\n\r\n// Default styles that can be overridden by your app\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\nexport const Wallet: FC = () => {\r\n    // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\r\n    const network = WalletAdapterNetwork.Devnet;\r\n\r\n    // You can also provide a custom RPC endpoint\r\n    const endpoint = useMemo(() => clusterApiUrl(network), [network]);\r\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\r\n    // Only the wallets you configure here will be compiled into your application\r\n    const wallets = useMemo(() => [\r\n        getPhantomWallet(),\r\n        getSlopeWallet(),\r\n        getSolflareWallet(),\r\n        getTorusWallet({\r\n            options: {clientId: 'Get a client ID @ https://developer.tor.us'}\r\n        }),\r\n        getLedgerWallet(),\r\n        getSolletWallet({network}),\r\n        getSolletExtensionWallet({network}),\r\n    ], [network]);\r\n    return (\r\n        <ConnectionProvider endpoint={endpoint}>\r\n            <WalletProvider wallets={wallets}>\r\n                <WalletModalProvider>\r\n                    <div>\r\n                        <WalletMultiButton style={\r\n                            {\r\n                                marginBottom : \"35px\"\r\n                            }\r\n                        }\r\n\r\n                            onClick={ // set connect true when Connect to wallet button is pressed\r\n                                () => {\r\n                                    console.log(\"Connected button is pressed\")\r\n                                    localStorage.setItem(\"connected\", \"true\")\r\n                                }\r\n\r\n                            }\r\n                        />\r\n                        <WalletDisconnectButton\r\n                            onClick={ // set conect false when disconnect is pressed\r\n                                (event) => {\r\n                                    localStorage.setItem(\"connected\", \"false\")\r\n                                    console.log(\"Disconnect button is pressed\")\r\n                                }\r\n                            }/>\r\n                        <WalletMulti/>\r\n                    </div>\r\n                </WalletModalProvider>\r\n            </WalletProvider>\r\n        </ConnectionProvider>\r\n    );\r\n};","import {CheckData, SendData} from \"./Firebase\";\r\nimport {useState} from \"react\";\r\n\r\nexport const Database = () => {\r\n\r\n    async function send(username: string, password: string, address: string) {\r\n        const data = await CheckData(username);\r\n        if (data !== \"No data available\") {\r\n            console.log(\"Return\");\r\n            return;\r\n        }\r\n        await SendData(username, password, address);\r\n    }\r\n\r\n    console.log(localStorage.getItem(\"address\"))\r\n\r\n    if (localStorage.getItem(\"address\") !== null && localStorage.getItem(\"address\") !== undefined)\r\n        send(\"\" + localStorage.getItem(\"username\"), \"\" + localStorage.getItem(\"password\"), \"\" + localStorage.getItem(\"address\"))\r\n\r\n\r\n    return (\r\n        <>\r\n            <button id=\"btn\" onClick={\r\n                () => {\r\n                    window.location.reload();\r\n                }\r\n            }>\r\n                Refresh\r\n            </button>\r\n            <br/><br/>\r\n            <div style={\r\n                {\r\n                    whiteSpace: \"pre-line\",\r\n                    fontStyle: \"italic\",\r\n                    fontWeight: \"bold\"\r\n                }\r\n            }>\r\n                {\r\n                    localStorage.getItem(\"address\") === null ? \"No wallet found\\nPlease refresh the page and connect your wallet\" : \"Thank you for sign up\\n\\n Go Back To Game\"\r\n                }\r\n            </div>\r\n            <>{\r\n                () => {\r\n                    localStorage.removeItem(\"address\");\r\n                }\r\n            }\r\n            </>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {CheckData, SendData} from \"./Firebase\";\r\nimport {Wallet} from \"./Wallet\";\r\n\r\n\r\nimport {\r\n    Database\r\n} from './Database'\r\n\r\n\r\nclass Signup extends React.Component {\r\n\r\n\r\n    private userData: any = {};\r\n    private buttonName: string = \"\"\r\n    private isPasswordAllocated: string = \"\";\r\n\r\n\r\n\r\n    async isDataAvailable(username: string) {\r\n        const data = await CheckData(username);\r\n        if (data !== \"No data available\") {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n    state = {\r\n        show: true,\r\n        message: \"\",\r\n        color: \"\",\r\n        usernameAvailable: false,\r\n        passwordAvailable: false,\r\n        showWallet: true,\r\n        saveData: true,\r\n        disableButton: true\r\n    };\r\n\r\n\r\n    writeUserData = () => {\r\n        console.log(\"DATA SAVED\");\r\n    };\r\n\r\n    getUserData = () => {\r\n        console.log(\"DATA COLLECTED\");\r\n    };\r\n\r\n    changeUI() {\r\n        this.setState({show: !this.state.show});\r\n        this.setState({showWallet: !this.state.showWallet});\r\n    }\r\n\r\n    changeMessage(msg: string, color: string) {\r\n        this.setState({message: msg});\r\n        this.setState({color: color});\r\n\r\n    }\r\n\r\n    onValueChange = (key: string, value: string) => {\r\n        this.userData[key] = value;\r\n    }\r\n\r\n    onUpdate(event: any, message: string, color: string, checkAvailability: boolean) {\r\n        this.onValueChange(\"username\", event.target.value)\r\n        this.state.usernameAvailable = checkAvailability;\r\n        this.changeMessage(message, color)\r\n    }\r\n\r\n    reset = () => {\r\n        localStorage.removeItem(\"disconnect\");\r\n        localStorage.removeItem(\"address\")\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <h1>Solana Wallet</h1>\r\n                    <div>\r\n                        {this.reset}\r\n                    </div>\r\n                    <div>\r\n                        {\r\n\r\n                            this.state.show ?\r\n                                <div>\r\n                                    <input id=\"username\"\r\n                                           type=\"text\"\r\n                                           placeholder=\"Enter username\"\r\n                                           onChange={\r\n                                               async (evt) => {\r\n\r\n                                                   if (evt.target.value === '') {\r\n                                                       this.onUpdate(evt, \"\", \"#000000\", false)\r\n                                                       return\r\n                                                   }\r\n\r\n                                                   if (await this.isDataAvailable(evt.target.value)) {\r\n                                                       this.onUpdate(evt, \"Username is not available\", \"#ff0000\", false)\r\n                                                   } else {\r\n                                                       this.onUpdate(evt, \"Username is available\", \"#00ff00\", true)\r\n                                                   }\r\n                                               }\r\n                                           }/>\r\n                                    <br/>\r\n                                    <a style={\r\n                                        {\r\n                                            color: this.state.color\r\n                                        }\r\n                                    }>\r\n                                        {this.state.message}\r\n                                    </a>\r\n\r\n                                    <br/><br/>\r\n\r\n                                    <input id=\"password\"\r\n                                           type=\"password\"\r\n                                           placeholder=\"Enter password\"\r\n                                           onChange={\r\n                                               (evt) => {\r\n                                                   this.onValueChange(\"password\", evt.target.value)\r\n                                                   this.isPasswordAllocated = evt.target.value;\r\n                                               }\r\n                                           }\r\n                                    />\r\n                                    <br/><br/>\r\n                                    <button\r\n                                        id=\"btn\"\r\n\r\n                                        onClick={\r\n                                            () => {\r\n                                                if (this.state.usernameAvailable && this.isPasswordAllocated !== \"\") {\r\n                                                    this.changeUI(); // Address Connect\r\n                                                    localStorage.setItem(\"username\", this.userData[\"username\"])\r\n                                                    localStorage.setItem(\"password\", this.userData[\"password\"])\r\n                                                    localStorage.removeItem(\"address\");\r\n                                                } else {\r\n                                                    //Pass\r\n                                                }\r\n\r\n                                            }\r\n                                        }>\r\n                                        Sign Up\r\n                                    </button>\r\n\r\n                                </div> :\r\n                                !this.state.showWallet ?\r\n                                    <div>\r\n                                        <Wallet/>\r\n                                        <br/>\r\n                                        <button id=\"btn\"\r\n                                                style={{float: \"left\"}}\r\n                                                onClick={() => {\r\n                                                    this.setState({showWallet: !this.state.showWallet});\r\n                                                    this.setState({saveData: !this.state.saveData});\r\n                                                }\r\n                                                }>\r\n                                            Save\r\n                                        </button>\r\n                                    </div>\r\n                                    : !this.state.saveData ?\r\n                                        <div>\r\n                                            <Database/>\r\n                                        </div> : null\r\n\r\n                        }\r\n                    </div>\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Signup;\r\n","import './App.css';\nimport {Wallet} from './Wallet';\nimport \"./Firebase\";\nimport {useWallet} from \"@solana/wallet-adapter-react\";\nimport {SendData, CheckData} from './Firebase';\nimport Signup from \"./Signup\";\n\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <div className=\"content\">\n                <div>\n                 <Signup/>\n                </div>\n            </div>\n        </div>\n    );\n\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}